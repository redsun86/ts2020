<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.esst.ts.dao.TeacherStudentRelationMapper">
    <resultMap id="BaseResultMap" type="com.esst.ts.model.TeacherStudentRelation">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="student_id" property="studentId" jdbcType="INTEGER"/>
        <result column="teacher_id" property="teacherId" jdbcType="INTEGER"/>
        <result column="is_del" property="isDel" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, student_id, teacher_id,is_del
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from teacher_student_relation
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByTeacherId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from teacher_student_relation
        where teacher_id = #{teacherId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from teacher_student_relation
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.esst.ts.model.TeacherStudentRelation">
    insert into teacher_student_relation (student_id, teacher_id,is_del
      )
    values (#{studentId,jdbcType=INTEGER}, #{teacherId,jdbcType=INTEGER},#{isDel,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.esst.ts.model.TeacherStudentRelation">
        insert into teacher_student_relation
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="studentId != null">
                student_id,
            </if>
            <if test="teacherId != null">
                teacher_id,
            </if>
            <if test="isDel != null">
                is_del,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="studentId != null">
                #{studentId,jdbcType=INTEGER},
            </if>
            <if test="teacherId != null">
                #{teacherId,jdbcType=INTEGER},
            </if>
            <if test="isDel != null">
                #{isDel,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.esst.ts.model.TeacherStudentRelation">
        update teacher_student_relation
        <set>
            <if test="studentId != null">
                student_id = #{studentId,jdbcType=INTEGER},
            </if>
            <if test="teacherId != null">
                teacher_id = #{teacherId,jdbcType=INTEGER},
            </if>
            <if test="isDel != null">
                is_del = #{isDel,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.esst.ts.model.TeacherStudentRelation">
    update teacher_student_relation
    set student_id = #{studentId,jdbcType=INTEGER},
      teacher_id = #{teacherId,jdbcType=INTEGER},
      is_del = #{isDel,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="GetList" resultMap="BaseResultMap" parameterType="com.esst.ts.model.TeacherStudentRelation">
        select tsr.id,tsr.student_id,tsr.teacher_id,tsr.is_del,ifnull(lg.`status`,0) is_online
        from teacher_student_relation tsr
        left join (select
        (REPLACE(unix_timestamp(current_timestamp(3)),'.','')-REPLACE(unix_timestamp(ut.update_time),'.','')*1000)
        outtime,ut.user_id,1 `status` from user_token ut
        where ut.login_type=1 and date_format(NOW(),'%Y.%m.%d')=date_format(ut.update_time,'%Y.%m.%d')
        and #{webOutTime,jdbcType=INTEGER}>
        (REPLACE(unix_timestamp(current_timestamp(3)),'.','') -REPLACE(unix_timestamp(ut.update_time),'.','')*1000)
        ) lg on tsr.Teacher_id=lg.user_id
        <where>
            tsr.id>0
            <if test="id != null">
                and tsr.id=#{id,jdbcType=INTEGER}
            </if>
            <if test="isDel != null">
                and tsr.is_del=#{isDel,jdbcType=INTEGER}
            </if>
            <if test="studentId != null">
                and tsr.student_id=#{studentId,jdbcType=INTEGER}
            </if>
            <if test="teacherId != null">
                and tsr.teacher_id=#{teacherId,jdbcType=INTEGER}
            </if>
            <if test="isOnline != null">
                and ifnull(lg.`status`,0)=#{isOnline,jdbcType=INTEGER}
            </if>
        </where>
    </select>
    <select id="GetOnLineTeacherList" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select u.id,u.id teacher_id,ifnull(lg.`status`,0) is_online from `user` u
        left join (select
        (REPLACE(unix_timestamp(current_timestamp(3)),'.','')-REPLACE(unix_timestamp(ut.update_time),'.','')*1000)
        outtime,ut.user_id,1 `status` from user_token ut
        where ut.login_type=1 and date_format(NOW(),'%Y.%m.%d')=date_format(ut.update_time,'%Y.%m.%d')
        and #{webOutTime,jdbcType=INTEGER}>
        (REPLACE(unix_timestamp(current_timestamp(3)),'.','')-REPLACE(unix_timestamp(ut.update_time),'.','')*1000))
        lg on u.id=lg.user_id
        <where>
            u.is_admin=1 and ifnull(lg.`status`,0)=1
        </where>
    </select>
</mapper>