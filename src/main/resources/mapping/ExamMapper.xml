<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.esst.ts.dao.ExamMapper">
    <resultMap id="BaseResultMap" type="com.esst.ts.model.Exam">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="exam_name" property="examName" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_user" property="createUser" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="BasePOJOResultMap" type="com.esst.ts.model.ExamPOJO">
        <id column="exam_id" property="id" jdbcType="INTEGER"/>
        <result column="exam_name" property="examName" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="status_name" property="statusName" jdbcType="VARCHAR"/>
        <result column="create_user" property="createUser" jdbcType="INTEGER"/>
        <result column="user_count" property="userCount" jdbcType="INTEGER"/>
        <result column="exam_attribute" property="examAttribute" jdbcType="INTEGER"/>
        <result column="edit_info" property="editInfo" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, exam_name, status, create_user
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from exam
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from exam
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.esst.ts.model.Exam">
    insert into exam (id, exam_name, exam_attribute,
      status, create_user)
    values (#{id,jdbcType=INTEGER}, #{examName,jdbcType=VARCHAR}, #{examAttribute,jdbcType=INTEGER},
      #{status,jdbcType=INTEGER}, #{createUser,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.esst.ts.model.Exam">
        insert into exam
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="examName != null">
                exam_name,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createUser != null">
                create_user,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="examName != null">
                #{examName,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createUser != null">
                #{createUser,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.esst.ts.model.Exam">
        update exam
        <set>
            <if test="examName != null">
                exam_name = #{examName,jdbcType=VARCHAR},
            </if>
            <if test="examAttribute != null">
                exam_attribute = #{examAttribute,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="createUser != null">
                create_user = #{createUser,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.esst.ts.model.Exam">
    update exam
    set exam_name = #{examName,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      create_user = #{createUser,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>